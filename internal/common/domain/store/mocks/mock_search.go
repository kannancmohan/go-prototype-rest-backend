// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kannancmohan/go-prototype-rest-backend/internal/common/domain/store (interfaces: PostSearchStore,PostSearchIndexStore)
//
// Generated by this command:
//
//	mockgen -destination=internal/common/domain/store/mocks/mock_search.go -package=mockstore github.com/kannancmohan/go-prototype-rest-backend/internal/common/domain/store PostSearchStore,PostSearchIndexStore
//

// Package mockstore is a generated GoMock package.
package mockstore

import (
	context "context"
	reflect "reflect"

	model "github.com/kannancmohan/go-prototype-rest-backend/internal/common/domain/model"
	store "github.com/kannancmohan/go-prototype-rest-backend/internal/common/domain/store"
	gomock "go.uber.org/mock/gomock"
)

// MockPostSearchStore is a mock of PostSearchStore interface.
type MockPostSearchStore struct {
	ctrl     *gomock.Controller
	recorder *MockPostSearchStoreMockRecorder
}

// MockPostSearchStoreMockRecorder is the mock recorder for MockPostSearchStore.
type MockPostSearchStoreMockRecorder struct {
	mock *MockPostSearchStore
}

// NewMockPostSearchStore creates a new mock instance.
func NewMockPostSearchStore(ctrl *gomock.Controller) *MockPostSearchStore {
	mock := &MockPostSearchStore{ctrl: ctrl}
	mock.recorder = &MockPostSearchStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostSearchStore) EXPECT() *MockPostSearchStoreMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockPostSearchStore) Search(arg0 context.Context, arg1 store.PostSearchReq) (store.PostSearchResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(store.PostSearchResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockPostSearchStoreMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPostSearchStore)(nil).Search), arg0, arg1)
}

// MockPostSearchIndexStore is a mock of PostSearchIndexStore interface.
type MockPostSearchIndexStore struct {
	ctrl     *gomock.Controller
	recorder *MockPostSearchIndexStoreMockRecorder
}

// MockPostSearchIndexStoreMockRecorder is the mock recorder for MockPostSearchIndexStore.
type MockPostSearchIndexStoreMockRecorder struct {
	mock *MockPostSearchIndexStore
}

// NewMockPostSearchIndexStore creates a new mock instance.
func NewMockPostSearchIndexStore(ctrl *gomock.Controller) *MockPostSearchIndexStore {
	mock := &MockPostSearchIndexStore{ctrl: ctrl}
	mock.recorder = &MockPostSearchIndexStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostSearchIndexStore) EXPECT() *MockPostSearchIndexStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPostSearchIndexStore) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPostSearchIndexStoreMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostSearchIndexStore)(nil).Delete), arg0, arg1)
}

// Index mocks base method.
func (m *MockPostSearchIndexStore) Index(arg0 context.Context, arg1 model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockPostSearchIndexStoreMockRecorder) Index(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockPostSearchIndexStore)(nil).Index), arg0, arg1)
}
