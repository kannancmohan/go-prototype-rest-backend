// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kannancmohan/go-prototype-rest-backend/internal/common/domain/store (interfaces: PostDBStore,RoleDBStore,UserDBStore)
//
// Generated by this command:
//
//	mockgen -destination=internal/common/domain/store/mocks/mock_db.go -package=mockstore github.com/kannancmohan/go-prototype-rest-backend/internal/common/domain/store PostDBStore,RoleDBStore,UserDBStore
//

// Package mockstore is a generated GoMock package.
package mockstore

import (
	context "context"
	reflect "reflect"

	model "github.com/kannancmohan/go-prototype-rest-backend/internal/common/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockPostDBStore is a mock of PostDBStore interface.
type MockPostDBStore struct {
	ctrl     *gomock.Controller
	recorder *MockPostDBStoreMockRecorder
}

// MockPostDBStoreMockRecorder is the mock recorder for MockPostDBStore.
type MockPostDBStoreMockRecorder struct {
	mock *MockPostDBStore
}

// NewMockPostDBStore creates a new mock instance.
func NewMockPostDBStore(ctrl *gomock.Controller) *MockPostDBStore {
	mock := &MockPostDBStore{ctrl: ctrl}
	mock.recorder = &MockPostDBStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostDBStore) EXPECT() *MockPostDBStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPostDBStore) Create(arg0 context.Context, arg1 *model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPostDBStoreMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostDBStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPostDBStore) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPostDBStoreMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostDBStore)(nil).Delete), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockPostDBStore) GetByID(arg0 context.Context, arg1 int64) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPostDBStoreMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostDBStore)(nil).GetByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockPostDBStore) Update(arg0 context.Context, arg1 *model.Post) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPostDBStoreMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostDBStore)(nil).Update), arg0, arg1)
}

// MockRoleDBStore is a mock of RoleDBStore interface.
type MockRoleDBStore struct {
	ctrl     *gomock.Controller
	recorder *MockRoleDBStoreMockRecorder
}

// MockRoleDBStoreMockRecorder is the mock recorder for MockRoleDBStore.
type MockRoleDBStoreMockRecorder struct {
	mock *MockRoleDBStore
}

// NewMockRoleDBStore creates a new mock instance.
func NewMockRoleDBStore(ctrl *gomock.Controller) *MockRoleDBStore {
	mock := &MockRoleDBStore{ctrl: ctrl}
	mock.recorder = &MockRoleDBStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleDBStore) EXPECT() *MockRoleDBStoreMockRecorder {
	return m.recorder
}

// GetByName mocks base method.
func (m *MockRoleDBStore) GetByName(arg0 context.Context, arg1 string) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockRoleDBStoreMockRecorder) GetByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockRoleDBStore)(nil).GetByName), arg0, arg1)
}

// MockUserDBStore is a mock of UserDBStore interface.
type MockUserDBStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserDBStoreMockRecorder
}

// MockUserDBStoreMockRecorder is the mock recorder for MockUserDBStore.
type MockUserDBStoreMockRecorder struct {
	mock *MockUserDBStore
}

// NewMockUserDBStore creates a new mock instance.
func NewMockUserDBStore(ctrl *gomock.Controller) *MockUserDBStore {
	mock := &MockUserDBStore{ctrl: ctrl}
	mock.recorder = &MockUserDBStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDBStore) EXPECT() *MockUserDBStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserDBStore) Create(arg0 context.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserDBStoreMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserDBStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockUserDBStore) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserDBStoreMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserDBStore)(nil).Delete), arg0, arg1)
}

// GetByEmail mocks base method.
func (m *MockUserDBStore) GetByEmail(arg0 context.Context, arg1 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserDBStoreMockRecorder) GetByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserDBStore)(nil).GetByEmail), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockUserDBStore) GetByID(arg0 context.Context, arg1 int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserDBStoreMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserDBStore)(nil).GetByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockUserDBStore) Update(arg0 context.Context, arg1 *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserDBStoreMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserDBStore)(nil).Update), arg0, arg1)
}
