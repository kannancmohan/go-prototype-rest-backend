// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kannancmohan/go-prototype-rest-backend/internal/common/domain/store (interfaces: PostMessageBrokerStore)
//
// Generated by this command:
//
//	mockgen -destination=internal/common/domain/store/mocks/mock_messagebroker.go -package=mockstore github.com/kannancmohan/go-prototype-rest-backend/internal/common/domain/store PostMessageBrokerStore
//

// Package mockstore is a generated GoMock package.
package mockstore

import (
	context "context"
	reflect "reflect"

	model "github.com/kannancmohan/go-prototype-rest-backend/internal/common/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockPostMessageBrokerStore is a mock of PostMessageBrokerStore interface.
type MockPostMessageBrokerStore struct {
	ctrl     *gomock.Controller
	recorder *MockPostMessageBrokerStoreMockRecorder
}

// MockPostMessageBrokerStoreMockRecorder is the mock recorder for MockPostMessageBrokerStore.
type MockPostMessageBrokerStoreMockRecorder struct {
	mock *MockPostMessageBrokerStore
}

// NewMockPostMessageBrokerStore creates a new mock instance.
func NewMockPostMessageBrokerStore(ctrl *gomock.Controller) *MockPostMessageBrokerStore {
	mock := &MockPostMessageBrokerStore{ctrl: ctrl}
	mock.recorder = &MockPostMessageBrokerStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostMessageBrokerStore) EXPECT() *MockPostMessageBrokerStoreMockRecorder {
	return m.recorder
}

// Created mocks base method.
func (m *MockPostMessageBrokerStore) Created(arg0 context.Context, arg1 model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Created", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Created indicates an expected call of Created.
func (mr *MockPostMessageBrokerStoreMockRecorder) Created(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Created", reflect.TypeOf((*MockPostMessageBrokerStore)(nil).Created), arg0, arg1)
}

// Deleted mocks base method.
func (m *MockPostMessageBrokerStore) Deleted(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deleted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deleted indicates an expected call of Deleted.
func (mr *MockPostMessageBrokerStoreMockRecorder) Deleted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deleted", reflect.TypeOf((*MockPostMessageBrokerStore)(nil).Deleted), arg0, arg1)
}

// Updated mocks base method.
func (m *MockPostMessageBrokerStore) Updated(arg0 context.Context, arg1 model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updated", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Updated indicates an expected call of Updated.
func (mr *MockPostMessageBrokerStoreMockRecorder) Updated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updated", reflect.TypeOf((*MockPostMessageBrokerStore)(nil).Updated), arg0, arg1)
}
